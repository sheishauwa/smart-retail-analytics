name: Deploy Smart Retail Analytics

on:
  push:
    branches: [ main ]   # Runs whenever you push to the main branch
  workflow_dispatch:     # Lets you manually run from GitHub Actions UI

jobs:
  deploy:
    runs-on: ubuntu-latest   # GitHub-hosted Linux runner

    env:
      AWS_REGION: us-east-1   # Change if you want another AWS region

    steps:
      # ----------------------
      # 1. Checkout Code
      # ----------------------
      - name: Checkout repository
        uses: actions/checkout@v3

      # ----------------------
      # 2. Configure AWS Credentials
      # ----------------------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ----------------------
      # 3. Set up Terraform
      # ----------------------
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve -var key_pair_name=${{ secrets.AWS_KEY_PAIR_NAME }}

      # ----------------------
      # 4. Install Ansible
      # ----------------------
      - name: Install Ansible
        run: sudo apt-get install -y ansible

      # ----------------------
      # 5. Save EC2 SSH Key from GitHub Secrets
      # ----------------------
      - name: Save SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem

      # ----------------------
      # 6. Run Ansible Playbook to Configure EC2
      # ----------------------
      - name: Run Ansible playbook
        run: |
          cd ansible
          ansible-playbook -i inventory.ini playbook.yml \
            --extra-vars "ec2_ip=${{ secrets.EC2_PUBLIC_IP }} kaggle_json='${{ secrets.KAGGLE_JSON }}'"

      # ----------------------
      # 7. Upload Ingestion Script to EC2
      # ----------------------
      - name: Upload Python ingestion script to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ec2-key.pem scripts/ingest_to_s3.py ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/home/ec2-user/

      # ----------------------
      # 8. Run Ingestion Script on EC2
      # ----------------------
      - name: Run ingestion script
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} "python3 ingest_to_s3.py"

